#include "pch.h"
#include<iostream>
#include<vector>
#include<algorithm>
#include<utility>
#include<map>
#include<queue>
#include <set>
#include <cstdlib>
#include <climits>
#include <iomanip>
#include<iostream>
#include <sstream>  // for string streams
#include <string>  // for string
#include <stack> 
#include <cmath>
#include <iostream>
#include <vector>
#include <numeric>
#include <string>
#include <functional>

#pragma comment(linker, "/STACK:2000000")
#pragma comment(linker, "/HEAP:2000000")

#define ll long long
#define ld long double
#define pb push_back
#define f(n) for(ll i=0;i<n;i++)
#define fn(a,n) for(ll a=0; a<n; a++)
#define flr(a,l,r) for(ll a=l; a<=r;a++)
#define mp make_pair
#define square (a) a*a
#define sorta(a) sort(a.begin(), a.end());
#define sortd(a) sort(a.begin(), a.end(), greater<ll>());
#define sortdp(a) sort(a.begin(), a.end(), greater<pair<ll, ll>>());
#define vec std::vector<ll>
#define vp std::vector<pair<ll, ll>>
#define all(a) a.begin(), a.end()
#define inf (long long)1e18
#define infi (int)1e9
#define endl '\n'
#define ff(a, b) for (ll i = 0; i < a; i++) for (ll j = 0; j < b; j++)
#define pp1(a) cout << a << endl;
#define pp2(a, b) cout << a << " " << b << endl;
#define pp3(a, b, c) cout << a << " " << b << " " << c << endl;
#define pp4(a, b, c, d) cout << a << " " << b << " " c << " " << d << endl;

//#define p(n) cout<<n<<"\n";
#define MOD 1000000007



using namespace std;



void print_width(ll x) {

	std::cout << std::fixed;
	std::cout << std::setprecision(x);
}

ll power(ll x, ll y, ll p = MOD)
{
	ll res = 1;      // Initialize result 

	x = x % p;  // Update x if it is more than or  
				// equal to p 

	while (y > 0)
	{
		// If y is odd, multiply x with result 
		if (y & 1)
			res = (res * x) % p;

		// y must be even now 
		y = y >> 1; // y = y/2 
		x = (x * x) % p;
	}
	return res;
}

void printArr(ll a[], ll n) {
	f(n)
		cout << a[i] << " ";
	cout << endl;
}

void printVector(std::vector<ll> v) {
	f(v.size())
		cout << v[i] << " ";
	cout << endl;
}

ll Min(ll a, ll b, ll c) {
	if (a < b and a < c)
		return a;
	if (b < c)
		return b;
	return c;
}

void initialize(ll arr[], ll n) {
	for (ll i = 0; i <= n; i++)
		arr[i] = i;
}

ll root(ll arr[], ll i) {

	while (arr[i] != i) {
		arr[i] = arr[arr[i]];
		i = arr[i];
	}
	return i;

}



ll isSubstring(string s1, string s2)
{
	int M = s1.length();
	int N = s2.length();

	/* A loop to slide pat[] one by one */
	for (int i = 0; i <= N - M; i++) {
		int j;

		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
			if (s2[i + j] != s1[j])
				break;

		if (j == M)
			return i;
	}

	return -1;
}

ll isSubstring1(string s1, string s2)
{
	int M = s1.length();
	int N = s2.length();

	/* A loop to slide pat[] one by one */
	for (int i = N - M; i >= 0;  i--) {
		int j;

		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
			if (s2[i + j] != s1[j])
				break;

		if (j == M)
			return i;
	}

	return -1;
}
/*
void KMPSearch(char* pat, char* txt)
{
	int M = strlen(pat);
	int N = strlen(txt);

	// create lps[] that will hold the longest prefix suffix
	// values for pattern
	int lps[M];

	// Preprocess the pattern (calculate lps[] array)
	computeLPSArray(pat, M, lps);

	int i = 0; // index for txt[]
	int j = 0; // index for pat[]
	while (i < N) {
		if (pat[j] == txt[i]) {
			j++;
			i++;
		}

		if (j == M) {
			printf("Found pattern at index %d ", i - j);
			j = lps[j - 1];
		}

		// mismatch after j matches
		else if (i < N && pat[j] != txt[i]) {
			// Do not match lps[0..lps[j-1]] characters,
			// they will match anyway
			if (j != 0)
				j = lps[j - 1];
			else
				i = i + 1;
		}
	}
} 
*/


const ll INF = 1e18;
ll n, a[100010], dp[100010][2], ans;
string s[100010][2];
int main(int argc, char const *argv[])
{
	int n, m, t;
	cin >> n >> m;
	vector <ll> c;
	static ll dp[1000001];
	f(n)
	{
		cin >> t; 
		c.push_back(t);
	}
	dp[0] = 1;
	f(n)
	{
		for (ll j = 1; j <= m; j++)
		{
			if (j - c[i] >= 0) dp[j] = (dp[j] + dp[j - c[i]]) % MOD;
		}
	}
	cout << dp[m];
}
