#include<iostream>
#include<vector>
#include<algorithm>
#include<utility>
#include<map>
#include<queue>
#include <set>
#include <cstdlib>
#include <climits>
#include <iomanip>
#include<iostream>
#include <sstream>  // for string streams
#include <string>  // for string
#include <stack> 
#include <cmath>
#include <iostream>
#include <vector>
#include <numeric>
#include <string>
#include <functional>
 
#pragma comment(linker, "/STACK:2000000")
#pragma comment(linker, "/HEAP:2000000")
 
#define ll long long

 
//#define p(n) cout<<n<<"\n";
#define MOD 1000000007
 
 
using namespace std;
 

 
ll isSubstring(string s1, string s2)
{
	int M = s1.length();
	int N = s2.length();
 
	/* A loop to slide pat[] one by one */
	for (int i = 0; i <= N - M; i++) {
		int j;
 
		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
			if (s2[i + j] != s1[j])
				break;
 
		if (j == M)
			return i;
	}
 
	return -1;
}
 
ll isSubstring1(string s1, string s2)
{
	int M = s1.length();
	int N = s2.length();
 
	/* A loop to slide pat[] one by one */
	for (int i = N - M; i >= 0;  i--) {
		int j;
 
		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
			if (s2[i + j] != s1[j])
				break;
 
		if (j == M)
			return i;
	}
 
	return -1;
}
/*

*/
const int Maxn = 200005;
 
using namespace std;
 
int main() {
	ll n, m, t;
	cin >> n >> m;
	vector <ll> dp(m + 1, m + 1), c(n);
	dp[0] = 0;
	f(n)
	{
		cin >> c[i];
	}
	f(n)
	{
		for (ll j = 1; j <= m; j++)
		{
			if (j - c[i] < 0) continue;
			dp[j] = min(dp[j], dp[j - c[i]] + 1);
		}
	}
	if (dp[m] == m + 1) cout << -1 << endl;
	else cout << dp[m] << endl;
	
}
