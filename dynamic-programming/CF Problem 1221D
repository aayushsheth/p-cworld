#include "pch.h"
#include<vector>
#include<algorithm>
#include<utility>
#include<map>
#include<queue>
#include <set>
#include <cstdlib>
#include <climits>
#include <iomanip>
#include<iostream>
#include <sstream>  // for string streams
#include <string>  // for string
#include <stack> 
#include <cmath>
#include <iostream>
#include <vector>
#include <numeric>
#include <string>
#include <functional>

#pragma comment(linker, "/STACK:2000000")
#pragma comment(linker, "/HEAP:2000000")

#define ll long long
#define ld long double
#define pb push_back
#define f(n) for(ll i=0;i<n;i++)
#define fn(a,n) for(ll a=0; a<n; a++)
#define flr(a,l,r) for(ll a=l; a<=r;a++)
#define mp make_pair
#define square (a) a*a
#define sorta(a) sort(a.begin(), a.end());
#define sortd(a) sort(a.begin(), a.end(), greater<ll>());
#define sortdp(a) sort(a.begin(), a.end(), greater<pair<ll, ll>>());
#define vec std::vector<ll>
#define vp std::vector<pair<ll, ll>>
#define all(a) a.begin(), a.end()
#define inf (long long)1e18
#define infi (int)1e9
#define endl '\n'
#define ff(a, b) for (ll i = 0; i < a; i++) for (ll j = 0; j < b; j++)
#define pp1(a) cout << a << endl;
#define pp2(a, b) cout << a << " " << b << endl;
#define pp3(a, b, c) cout << a << " " << b << " " << c << endl;
#define pp4(a, b, c, d) cout << a << " " << b << " " c << " " << d << endl;

//#define p(n) cout<<n<<"\n";
#define MOD 1000000007


const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr(T x) -> decltype(x * x) { return x * x; }
template<typename T> inline T abs(T x) { return x > T() ? x : -x; }
template<typename T1, typename T2> inline bool umx(T1& a, T2 b) { if (a < b) { a = b; return 1; } return 0; }
template<typename T1, typename T2> inline bool umn(T1& a, T2 b) { if (b < a) { a = b; return 1; } return 0; }

const int N = 300100;

ll dp[N][3];
int n;
int a[N];
int b[N];

ll solve() {
	cin >> n;
	f(n)
	{
		cin >> a[i] >> b[i];
	}
	fn(i, N) {
		fn(j, 3) {
			dp[i][j] = inf;
		}
	}
	dp[0][0] = 0; dp[0][1] = b[0]; dp[0][2] = 2 * b[0];
	flr(i, 1,n)
	{
		fn(j, 3)
		{
			fn(k, 3)
			{
				if (a[i - 1] + k == a[i] + j)
				{
					continue;
				}
				else
				{
					dp[i][j] = min(dp[i][j], dp[i - 1][k] + b[i] * j);
				}
			}
		}
	}
	ll ans = min(min(dp[n - 1][0], dp[n - 1][1]), dp[n - 1][2]);
	return ans;
}

int main() {
	ll q;
	cin >> q;
	fn(cnt, q) {
		ll ans = solve();
		cout << ans << "\n";
	}
	return 0;
}
